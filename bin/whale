#!/usr/bin/env ruby
# whale

# 20080520
# 0.4.3

# Description: Sometimes when they go fishing, they get a whale and it sinks their boat.  

# History: 
# 1. I took #read_words_file from difflist.  
# 2. I took a bit of RandomMethod for #random_word.   

# Discussion: 
# 1. As yesterday's site is down I've selected my next victim.  It is a PayPal phishing site and they've got some Javascript which  checks that the username conforms to being an acceptable email address.  Then I noticed that the form is not dependent on Javascript and so it could be gotton around by simply ignoring Javascript as Whale does.  However, since one of the goals is to make the real user data indistinguishable from the fake, it seems as if it is a better idea to make the data input from Whale look like the most likely set of real user data.  

# Changes since 0.3: 
# 1. I've added the option to select a user agent.  
# 2. I've also added the option to be able to follow meta-refresh links.  Neat!  I can test it on that PayPal phishing site which necessitated, or at least had recommended, having email addresses, since it used a meta-refresh.  
# 3. I've removed the debugging stuff.  
# 4. There was an error if there was no meta refresh of course!  So now it doesn't attempt to access the match data array unless there's something in it.  
# 3
# 5. Somtimes a form won't have a name, so I need to just grab the first one or a subsequent one if need be...  
# 6. Added a hash to pass in options to Whale.initialize.  

# Todo: 
# 1. Command line options library needed really, since fixed order options is a bit blerrr.  

require 'rubygems'
require 'mechanize'
#require 'pp'

TLD = %w{com net org edu int mil gov arpa biz aero name coop info pro museum}
TLD_SIZE = 15

class Whale
  
  attr_accessor :url, :form_name, :username_field_name, :password_field_name
  attr_accessor :verbose, :username_is_email_address, :user_agent
  attr_reader :words, :words_size
  
  def initialize(url, options)
    @url = url
    @form_name = options[:form_name] || nil
    @username_field_name = options[:username_fieldname] || 'username'
    @password_field_name = options[:password_field_name] || 'password'
    @verbose = options[:verbose] || false
    @username_is_email_address = options[:username_is_email_address] || false
    @user_agent = options[:user_agent] || 'Windows IE 6'
    @words = read_words_file('/usr/share/dict/words')
    @words_size = @words.size # It is more efficient for this to be called once here.  
  end
  
  def counter_phish
    start_time = Time.now
    puts "Whale session begun #{start_time}."
    submission_count = 0
    m = WWW::Mechanize.new
    m.user_agent_alias = @user_agent
    begin
      loop do
        page = m.get(@url)
        md = page.body.match(/meta.*?Refresh.*?url=(.*?)"/i)
        if md
          #puts 'meta_refresh_url found'
          page = m.get(md[1])
          #pp page  #debug
        end
        #pp page  #debug
        if @form_name
          form = page.form(@form_name)
        else
          form = page.forms[0]
        end
        if @username_is_email_address
          username = "#{random_word}@#{random_word}.#{random_TLD}"
        else
          username = random_word
        end
        password = random_word
        form[@username_field_name] = username
        form[@password_field_name] = password
        m.submit(form)
        #pp m.submit(form)  #debug
        submission_count += 1
        puts "#{submission_count} #{username}:#{password}" if @verbose
      end
    ensure
      finish_time = Time.now
      time_delta_in_minutes = (finish_time - start_time) / 60
      submissions_per_minute = submission_count / time_delta_in_minutes
      puts "Whale session terminated #{finish_time} with #{submission_count} counter-phishes served in #{time_delta_in_minutes} minutes for an average of #{submissions_per_minute} submissions per minute."
    end
  end
  
  private
  
  def read_words_file(filename)
    a = []
    File.open(filename, 'r').each {|line| a << line.chomp }
    a
  end
  
  def random_word
    @words[rand(@words_size)]
  end
  
  def random_TLD
    TLD[rand(TLD_SIZE)]
  end
  
end

if __FILE__ == $0
  w = Whale.new(ARGV[0], ARGV[1], ARGV[2], ARGV[3], ARGV[4], ARGV[5], ARGV[6])
  w.counter_phish
end
