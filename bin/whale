#!/usr/bin/env ruby
# whale

# 20061009
# 0.2.3

# Description: Sometimes when they go fishing, they get a whale and it sinks their boat.  

# History: 
# 1. I took #read_words_file from difflist.  
# 2. I took a bit of RandomMethod for #random_word.   

# Changes since 0.1: 
# 1. Added the time of script start into the output.  
# 2. Moved the output to immediately after submission.  
# 3. Added the count of submissions next to output of each username:password pair.  
# 4. It now attempts to trap when a break occurs to output a summary.  
# 5. The total number of submissions is now output at the end verbose or not.  
# 6. Added more stuff to the summary as per Todo 2.  

# Todo: 
# 1. Command line options library needed really, since fixed order options is a bit blerrr.  
# 2. Trap breaking into the loop and output stuff like the end time, total time, and total count.  All done as of 0.2.3.  

require 'rubygems'
require 'mechanize'
#require 'pp'

class Whale
  
  def initialize(url, form_name, username_field_name, password_field_name, verbose = false)
    @url, @form_name, @username_field_name, @password_field_name, @verbose = url, form_name, username_field_name, password_field_name, verbose
    @words = read_words_file('/usr/share/dict/words')
    @words_size = @words.size # It is more efficient for this to be called once here.  
  end
  
  def counter_phish
    start_time = Time.now
    puts "Whale session begun #{start_time}."
    submission_count = 0
    m = WWW::Mechanize.new
    begin
      loop do
        page = m.get(@url)
        #pp page  #debug
        form = page.form(@form_name)
        username, password = random_word, random_word
        form.fields.find {|f| f.name == @username_field_name}.value = username
        form.fields.find {|f| f.name == @password_field_name}.value = password
        m.submit(form)
        submission_count += 1
        puts "#{submission_count} #{username}:#{password}" if @verbose
      end
    ensure
      finish_time = Time.now
      time_delta_in_minutes = (finish_time - start_time) * 60
      submissions_per_minute = submission_count/time_delta_in_minutes
      puts "Whale session terminated #{finish_time} with #{submission_count} counter-phishes served in #{time_delta_in_minutes} minutes for an average of #{submissions_per_minute} submissions per minute."
    end
  end
  
  private
  
  def read_words_file(filename)
    a = []
    File.open(filename, 'r').each {|line| a << line.chomp }
    a
  end
  
  def random_word
    @words[rand(@words_size)]
  end
  
end

if __FILE__ == $0
  w = Whale.new(ARGV[0], ARGV[1], ARGV[2], ARGV[3], ARGV[4])
  w.counter_phish
end
